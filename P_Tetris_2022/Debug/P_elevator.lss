
P_elevator.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000028  00800100  00000ca8  00000d3c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000ca8  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          000000ae  00800128  00800128  00000d64  2**0
                  ALLOC
  3 .comment      00000030  00000000  00000000  00000d64  2**0
                  CONTENTS, READONLY
  4 .note.gnu.avr.deviceinfo 00000040  00000000  00000000  00000d94  2**2
                  CONTENTS, READONLY
  5 .debug_aranges 00000070  00000000  00000000  00000dd4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_info   00000f46  00000000  00000000  00000e44  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_abbrev 000008db  00000000  00000000  00001d8a  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_line   00000879  00000000  00000000  00002665  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_frame  00000154  00000000  00000000  00002ee0  2**2
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_str    000004cf  00000000  00000000  00003034  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_loc    000005b5  00000000  00000000  00003503  2**0
                  CONTENTS, READONLY, DEBUGGING
 12 .debug_ranges 00000120  00000000  00000000  00003ab8  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	45 c0       	rjmp	.+138    	; 0x8c <__ctors_end>
   2:	00 00       	nop
   4:	60 c0       	rjmp	.+192    	; 0xc6 <__bad_interrupt>
   6:	00 00       	nop
   8:	5e c0       	rjmp	.+188    	; 0xc6 <__bad_interrupt>
   a:	00 00       	nop
   c:	5c c0       	rjmp	.+184    	; 0xc6 <__bad_interrupt>
   e:	00 00       	nop
  10:	5a c0       	rjmp	.+180    	; 0xc6 <__bad_interrupt>
  12:	00 00       	nop
  14:	58 c0       	rjmp	.+176    	; 0xc6 <__bad_interrupt>
  16:	00 00       	nop
  18:	56 c0       	rjmp	.+172    	; 0xc6 <__bad_interrupt>
  1a:	00 00       	nop
  1c:	54 c0       	rjmp	.+168    	; 0xc6 <__bad_interrupt>
  1e:	00 00       	nop
  20:	52 c0       	rjmp	.+164    	; 0xc6 <__bad_interrupt>
  22:	00 00       	nop
  24:	50 c0       	rjmp	.+160    	; 0xc6 <__bad_interrupt>
  26:	00 00       	nop
  28:	85 c0       	rjmp	.+266    	; 0x134 <__vector_10>
  2a:	00 00       	nop
  2c:	4c c0       	rjmp	.+152    	; 0xc6 <__bad_interrupt>
  2e:	00 00       	nop
  30:	4a c0       	rjmp	.+148    	; 0xc6 <__bad_interrupt>
  32:	00 00       	nop
  34:	48 c0       	rjmp	.+144    	; 0xc6 <__bad_interrupt>
  36:	00 00       	nop
  38:	46 c0       	rjmp	.+140    	; 0xc6 <__bad_interrupt>
  3a:	00 00       	nop
  3c:	44 c0       	rjmp	.+136    	; 0xc6 <__bad_interrupt>
  3e:	00 00       	nop
  40:	43 c0       	rjmp	.+134    	; 0xc8 <__vector_16>
  42:	00 00       	nop
  44:	40 c0       	rjmp	.+128    	; 0xc6 <__bad_interrupt>
  46:	00 00       	nop
  48:	3e c0       	rjmp	.+124    	; 0xc6 <__bad_interrupt>
  4a:	00 00       	nop
  4c:	3c c0       	rjmp	.+120    	; 0xc6 <__bad_interrupt>
  4e:	00 00       	nop
  50:	3a c0       	rjmp	.+116    	; 0xc6 <__bad_interrupt>
  52:	00 00       	nop
  54:	38 c0       	rjmp	.+112    	; 0xc6 <__bad_interrupt>
  56:	00 00       	nop
  58:	36 c0       	rjmp	.+108    	; 0xc6 <__bad_interrupt>
  5a:	00 00       	nop
  5c:	34 c0       	rjmp	.+104    	; 0xc6 <__bad_interrupt>
  5e:	00 00       	nop
  60:	32 c0       	rjmp	.+100    	; 0xc6 <__bad_interrupt>
  62:	00 00       	nop
  64:	30 c0       	rjmp	.+96     	; 0xc6 <__bad_interrupt>
  66:	00 00       	nop
  68:	2e c0       	rjmp	.+92     	; 0xc6 <__bad_interrupt>
  6a:	00 00       	nop
  6c:	2c c0       	rjmp	.+88     	; 0xc6 <__bad_interrupt>
  6e:	00 00       	nop
  70:	2a c0       	rjmp	.+84     	; 0xc6 <__bad_interrupt>
  72:	00 00       	nop
  74:	28 c0       	rjmp	.+80     	; 0xc6 <__bad_interrupt>
  76:	00 00       	nop
  78:	26 c0       	rjmp	.+76     	; 0xc6 <__bad_interrupt>
  7a:	00 00       	nop
  7c:	24 c0       	rjmp	.+72     	; 0xc6 <__bad_interrupt>
  7e:	00 00       	nop
  80:	22 c0       	rjmp	.+68     	; 0xc6 <__bad_interrupt>
  82:	00 00       	nop
  84:	20 c0       	rjmp	.+64     	; 0xc6 <__bad_interrupt>
  86:	00 00       	nop
  88:	1e c0       	rjmp	.+60     	; 0xc6 <__bad_interrupt>
	...

0000008c <__ctors_end>:
  8c:	11 24       	eor	r1, r1
  8e:	1f be       	out	0x3f, r1	; 63
  90:	cf ef       	ldi	r28, 0xFF	; 255
  92:	d0 e1       	ldi	r29, 0x10	; 16
  94:	de bf       	out	0x3e, r29	; 62
  96:	cd bf       	out	0x3d, r28	; 61

00000098 <__do_copy_data>:
  98:	11 e0       	ldi	r17, 0x01	; 1
  9a:	a0 e0       	ldi	r26, 0x00	; 0
  9c:	b1 e0       	ldi	r27, 0x01	; 1
  9e:	e8 ea       	ldi	r30, 0xA8	; 168
  a0:	fc e0       	ldi	r31, 0x0C	; 12
  a2:	00 e0       	ldi	r16, 0x00	; 0
  a4:	0b bf       	out	0x3b, r16	; 59
  a6:	02 c0       	rjmp	.+4      	; 0xac <__do_copy_data+0x14>
  a8:	07 90       	elpm	r0, Z+
  aa:	0d 92       	st	X+, r0
  ac:	a8 32       	cpi	r26, 0x28	; 40
  ae:	b1 07       	cpc	r27, r17
  b0:	d9 f7       	brne	.-10     	; 0xa8 <__do_copy_data+0x10>

000000b2 <__do_clear_bss>:
  b2:	21 e0       	ldi	r18, 0x01	; 1
  b4:	a8 e2       	ldi	r26, 0x28	; 40
  b6:	b1 e0       	ldi	r27, 0x01	; 1
  b8:	01 c0       	rjmp	.+2      	; 0xbc <.do_clear_bss_start>

000000ba <.do_clear_bss_loop>:
  ba:	1d 92       	st	X+, r1

000000bc <.do_clear_bss_start>:
  bc:	a6 3d       	cpi	r26, 0xD6	; 214
  be:	b2 07       	cpc	r27, r18
  c0:	e1 f7       	brne	.-8      	; 0xba <.do_clear_bss_loop>
  c2:	d0 d3       	rcall	.+1952   	; 0x864 <main>
  c4:	ef c5       	rjmp	.+3038   	; 0xca4 <_exit>

000000c6 <__bad_interrupt>:
  c6:	9c cf       	rjmp	.-200    	; 0x0 <__vectors>

000000c8 <__vector_16>:
unsigned long cnt1, cnt2, flag = 1, status, down, side, space[8], temp[12] = {};
unsigned char (*block)[8];
int m1, m2, m3, m4;

ISR(TIMER0_OVF_vect)
{
  c8:	1f 92       	push	r1
  ca:	0f 92       	push	r0
  cc:	0f b6       	in	r0, 0x3f	; 63
  ce:	0f 92       	push	r0
  d0:	11 24       	eor	r1, r1
  d2:	2f 93       	push	r18
  d4:	8f 93       	push	r24
  d6:	9f 93       	push	r25
  d8:	af 93       	push	r26
  da:	bf 93       	push	r27
	TCNT0 = 254;
  dc:	8e ef       	ldi	r24, 0xFE	; 254
  de:	82 bf       	out	0x32, r24	; 50
	cnt1++;
  e0:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <cnt1>
  e4:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <cnt1+0x1>
  e8:	a0 91 be 01 	lds	r26, 0x01BE	; 0x8001be <cnt1+0x2>
  ec:	b0 91 bf 01 	lds	r27, 0x01BF	; 0x8001bf <cnt1+0x3>
  f0:	01 96       	adiw	r24, 0x01	; 1
  f2:	a1 1d       	adc	r26, r1
  f4:	b1 1d       	adc	r27, r1
  f6:	80 93 bc 01 	sts	0x01BC, r24	; 0x8001bc <cnt1>
  fa:	90 93 bd 01 	sts	0x01BD, r25	; 0x8001bd <cnt1+0x1>
  fe:	a0 93 be 01 	sts	0x01BE, r26	; 0x8001be <cnt1+0x2>
 102:	b0 93 bf 01 	sts	0x01BF, r27	; 0x8001bf <cnt1+0x3>
	if(cnt1 >= 65535)
 106:	8f 3f       	cpi	r24, 0xFF	; 255
 108:	9f 4f       	sbci	r25, 0xFF	; 255
 10a:	a1 05       	cpc	r26, r1
 10c:	b1 05       	cpc	r27, r1
 10e:	40 f0       	brcs	.+16     	; 0x120 <__vector_16+0x58>
	cnt1 = 0;
 110:	10 92 bc 01 	sts	0x01BC, r1	; 0x8001bc <cnt1>
 114:	10 92 bd 01 	sts	0x01BD, r1	; 0x8001bd <cnt1+0x1>
 118:	10 92 be 01 	sts	0x01BE, r1	; 0x8001be <cnt1+0x2>
 11c:	10 92 bf 01 	sts	0x01BF, r1	; 0x8001bf <cnt1+0x3>
}
 120:	bf 91       	pop	r27
 122:	af 91       	pop	r26
 124:	9f 91       	pop	r25
 126:	8f 91       	pop	r24
 128:	2f 91       	pop	r18
 12a:	0f 90       	pop	r0
 12c:	0f be       	out	0x3f, r0	; 63
 12e:	0f 90       	pop	r0
 130:	1f 90       	pop	r1
 132:	18 95       	reti

00000134 <__vector_10>:

ISR(TIMER2_OVF_vect)
{
 134:	1f 92       	push	r1
 136:	0f 92       	push	r0
 138:	0f b6       	in	r0, 0x3f	; 63
 13a:	0f 92       	push	r0
 13c:	11 24       	eor	r1, r1
 13e:	2f 93       	push	r18
 140:	8f 93       	push	r24
 142:	9f 93       	push	r25
 144:	af 93       	push	r26
 146:	bf 93       	push	r27
	cnt2++;
 148:	80 91 66 01 	lds	r24, 0x0166	; 0x800166 <cnt2>
 14c:	90 91 67 01 	lds	r25, 0x0167	; 0x800167 <cnt2+0x1>
 150:	a0 91 68 01 	lds	r26, 0x0168	; 0x800168 <cnt2+0x2>
 154:	b0 91 69 01 	lds	r27, 0x0169	; 0x800169 <cnt2+0x3>
 158:	01 96       	adiw	r24, 0x01	; 1
 15a:	a1 1d       	adc	r26, r1
 15c:	b1 1d       	adc	r27, r1
 15e:	80 93 66 01 	sts	0x0166, r24	; 0x800166 <cnt2>
 162:	90 93 67 01 	sts	0x0167, r25	; 0x800167 <cnt2+0x1>
 166:	a0 93 68 01 	sts	0x0168, r26	; 0x800168 <cnt2+0x2>
 16a:	b0 93 69 01 	sts	0x0169, r27	; 0x800169 <cnt2+0x3>
	if(cnt2 >= 1000)
 16e:	88 3e       	cpi	r24, 0xE8	; 232
 170:	93 40       	sbci	r25, 0x03	; 3
 172:	a1 05       	cpc	r26, r1
 174:	b1 05       	cpc	r27, r1
 176:	d8 f0       	brcs	.+54     	; 0x1ae <__vector_10+0x7a>
	{
		cnt2 = 0;
 178:	10 92 66 01 	sts	0x0166, r1	; 0x800166 <cnt2>
 17c:	10 92 67 01 	sts	0x0167, r1	; 0x800167 <cnt2+0x1>
 180:	10 92 68 01 	sts	0x0168, r1	; 0x800168 <cnt2+0x2>
 184:	10 92 69 01 	sts	0x0169, r1	; 0x800169 <cnt2+0x3>
		down++;
 188:	80 91 76 01 	lds	r24, 0x0176	; 0x800176 <down>
 18c:	90 91 77 01 	lds	r25, 0x0177	; 0x800177 <down+0x1>
 190:	a0 91 78 01 	lds	r26, 0x0178	; 0x800178 <down+0x2>
 194:	b0 91 79 01 	lds	r27, 0x0179	; 0x800179 <down+0x3>
 198:	01 96       	adiw	r24, 0x01	; 1
 19a:	a1 1d       	adc	r26, r1
 19c:	b1 1d       	adc	r27, r1
 19e:	80 93 76 01 	sts	0x0176, r24	; 0x800176 <down>
 1a2:	90 93 77 01 	sts	0x0177, r25	; 0x800177 <down+0x1>
 1a6:	a0 93 78 01 	sts	0x0178, r26	; 0x800178 <down+0x2>
 1aa:	b0 93 79 01 	sts	0x0179, r27	; 0x800179 <down+0x3>
	}
}
 1ae:	bf 91       	pop	r27
 1b0:	af 91       	pop	r26
 1b2:	9f 91       	pop	r25
 1b4:	8f 91       	pop	r24
 1b6:	2f 91       	pop	r18
 1b8:	0f 90       	pop	r0
 1ba:	0f be       	out	0x3f, r0	; 63
 1bc:	0f 90       	pop	r0
 1be:	1f 90       	pop	r1
 1c0:	18 95       	reti

000001c2 <write>:

void write(unsigned char H, unsigned char L)
{
	PORTA &= ~(1 << PORTA1);
 1c2:	9b b3       	in	r25, 0x1b	; 27
 1c4:	9d 7f       	andi	r25, 0xFD	; 253
 1c6:	9b bb       	out	0x1b, r25	; 27
	for(int i = 0; i < 8; i++)
 1c8:	20 e0       	ldi	r18, 0x00	; 0
 1ca:	30 e0       	ldi	r19, 0x00	; 0
 1cc:	12 c0       	rjmp	.+36     	; 0x1f2 <write+0x30>
	{
		PORTA &= ~(1 << PORTA0);
 1ce:	9b b3       	in	r25, 0x1b	; 27
 1d0:	9e 7f       	andi	r25, 0xFE	; 254
 1d2:	9b bb       	out	0x1b, r25	; 27
		if(H & 0x80)
 1d4:	88 23       	and	r24, r24
 1d6:	24 f4       	brge	.+8      	; 0x1e0 <write+0x1e>
			PORTA |= (1 << PORTA2);
 1d8:	9b b3       	in	r25, 0x1b	; 27
 1da:	94 60       	ori	r25, 0x04	; 4
 1dc:	9b bb       	out	0x1b, r25	; 27
 1de:	03 c0       	rjmp	.+6      	; 0x1e6 <write+0x24>
		else
			PORTA &= ~(1 << PORTA2);
 1e0:	9b b3       	in	r25, 0x1b	; 27
 1e2:	9b 7f       	andi	r25, 0xFB	; 251
 1e4:	9b bb       	out	0x1b, r25	; 27
		H = H << 1;
 1e6:	88 0f       	add	r24, r24
		PORTA |= (1 << PORTA0);
 1e8:	9b b3       	in	r25, 0x1b	; 27
 1ea:	91 60       	ori	r25, 0x01	; 1
 1ec:	9b bb       	out	0x1b, r25	; 27
}

void write(unsigned char H, unsigned char L)
{
	PORTA &= ~(1 << PORTA1);
	for(int i = 0; i < 8; i++)
 1ee:	2f 5f       	subi	r18, 0xFF	; 255
 1f0:	3f 4f       	sbci	r19, 0xFF	; 255
 1f2:	28 30       	cpi	r18, 0x08	; 8
 1f4:	31 05       	cpc	r19, r1
 1f6:	5c f3       	brlt	.-42     	; 0x1ce <write+0xc>
 1f8:	20 e0       	ldi	r18, 0x00	; 0
 1fa:	30 e0       	ldi	r19, 0x00	; 0
 1fc:	12 c0       	rjmp	.+36     	; 0x222 <write+0x60>
		H = H << 1;
		PORTA |= (1 << PORTA0);
	}
	for(int i = 0; i < 8; i++)
	{
		PORTA &= ~(1 << PORTA0);
 1fe:	8b b3       	in	r24, 0x1b	; 27
 200:	8e 7f       	andi	r24, 0xFE	; 254
 202:	8b bb       	out	0x1b, r24	; 27
		if(L & 0x80)
 204:	66 23       	and	r22, r22
 206:	24 f4       	brge	.+8      	; 0x210 <write+0x4e>
			PORTA |= (1 << PORTA2);
 208:	8b b3       	in	r24, 0x1b	; 27
 20a:	84 60       	ori	r24, 0x04	; 4
 20c:	8b bb       	out	0x1b, r24	; 27
 20e:	03 c0       	rjmp	.+6      	; 0x216 <write+0x54>
		else
			PORTA &= ~(1 << PORTA2);
 210:	8b b3       	in	r24, 0x1b	; 27
 212:	8b 7f       	andi	r24, 0xFB	; 251
 214:	8b bb       	out	0x1b, r24	; 27
		L = L << 1;
 216:	66 0f       	add	r22, r22
		PORTA |= (1 << PORTA0);
 218:	8b b3       	in	r24, 0x1b	; 27
 21a:	81 60       	ori	r24, 0x01	; 1
 21c:	8b bb       	out	0x1b, r24	; 27
		else
			PORTA &= ~(1 << PORTA2);
		H = H << 1;
		PORTA |= (1 << PORTA0);
	}
	for(int i = 0; i < 8; i++)
 21e:	2f 5f       	subi	r18, 0xFF	; 255
 220:	3f 4f       	sbci	r19, 0xFF	; 255
 222:	28 30       	cpi	r18, 0x08	; 8
 224:	31 05       	cpc	r19, r1
 226:	5c f3       	brlt	.-42     	; 0x1fe <write+0x3c>
		else
			PORTA &= ~(1 << PORTA2);
		L = L << 1;
		PORTA |= (1 << PORTA0);
	}
}
 228:	08 95       	ret

0000022a <w>:

void w(unsigned char H, unsigned char L)
{
	PORTA &= ~(1 << PORTA1);
 22a:	9b b3       	in	r25, 0x1b	; 27
 22c:	9d 7f       	andi	r25, 0xFD	; 253
 22e:	9b bb       	out	0x1b, r25	; 27
	for(int i = 0; i < 8; i++)
 230:	20 e0       	ldi	r18, 0x00	; 0
 232:	30 e0       	ldi	r19, 0x00	; 0
 234:	12 c0       	rjmp	.+36     	; 0x25a <w+0x30>
	{
		PORTA &= ~(1 << PORTA0);
 236:	9b b3       	in	r25, 0x1b	; 27
 238:	9e 7f       	andi	r25, 0xFE	; 254
 23a:	9b bb       	out	0x1b, r25	; 27
		if(H & 0x80)
 23c:	88 23       	and	r24, r24
 23e:	24 f4       	brge	.+8      	; 0x248 <w+0x1e>
			PORTA |= (1 << PORTA2);
 240:	9b b3       	in	r25, 0x1b	; 27
 242:	94 60       	ori	r25, 0x04	; 4
 244:	9b bb       	out	0x1b, r25	; 27
 246:	03 c0       	rjmp	.+6      	; 0x24e <w+0x24>
		else
			PORTA &= ~(1 << PORTA2);
 248:	9b b3       	in	r25, 0x1b	; 27
 24a:	9b 7f       	andi	r25, 0xFB	; 251
 24c:	9b bb       	out	0x1b, r25	; 27
		H = H << 1;
 24e:	88 0f       	add	r24, r24
		PORTA |= (1 << PORTA0);
 250:	9b b3       	in	r25, 0x1b	; 27
 252:	91 60       	ori	r25, 0x01	; 1
 254:	9b bb       	out	0x1b, r25	; 27
}

void w(unsigned char H, unsigned char L)
{
	PORTA &= ~(1 << PORTA1);
	for(int i = 0; i < 8; i++)
 256:	2f 5f       	subi	r18, 0xFF	; 255
 258:	3f 4f       	sbci	r19, 0xFF	; 255
 25a:	28 30       	cpi	r18, 0x08	; 8
 25c:	31 05       	cpc	r19, r1
 25e:	5c f3       	brlt	.-42     	; 0x236 <w+0xc>
 260:	20 e0       	ldi	r18, 0x00	; 0
 262:	30 e0       	ldi	r19, 0x00	; 0
 264:	12 c0       	rjmp	.+36     	; 0x28a <w+0x60>
		H = H << 1;
		PORTA |= (1 << PORTA0);
	}
	for(int i = 0; i < 8; i++)
	{
		PORTA &= ~(1 << PORTA0);
 266:	8b b3       	in	r24, 0x1b	; 27
 268:	8e 7f       	andi	r24, 0xFE	; 254
 26a:	8b bb       	out	0x1b, r24	; 27
		if(L & 0x80)
 26c:	66 23       	and	r22, r22
 26e:	24 f4       	brge	.+8      	; 0x278 <w+0x4e>
			PORTA |= (1 << PORTA2);
 270:	8b b3       	in	r24, 0x1b	; 27
 272:	84 60       	ori	r24, 0x04	; 4
 274:	8b bb       	out	0x1b, r24	; 27
 276:	03 c0       	rjmp	.+6      	; 0x27e <w+0x54>
		else
			PORTA &= ~(1 << PORTA2);
 278:	8b b3       	in	r24, 0x1b	; 27
 27a:	8b 7f       	andi	r24, 0xFB	; 251
 27c:	8b bb       	out	0x1b, r24	; 27
		L = L << 1;
 27e:	66 0f       	add	r22, r22
		PORTA |= (1 << PORTA0);
 280:	8b b3       	in	r24, 0x1b	; 27
 282:	81 60       	ori	r24, 0x01	; 1
 284:	8b bb       	out	0x1b, r24	; 27
		else
			PORTA &= ~(1 << PORTA2);
		H = H << 1;
		PORTA |= (1 << PORTA0);
	}
	for(int i = 0; i < 8; i++)
 286:	2f 5f       	subi	r18, 0xFF	; 255
 288:	3f 4f       	sbci	r19, 0xFF	; 255
 28a:	28 30       	cpi	r18, 0x08	; 8
 28c:	31 05       	cpc	r19, r1
 28e:	5c f3       	brlt	.-42     	; 0x266 <w+0x3c>
		else
			PORTA &= ~(1 << PORTA2);
		L = L << 1;
		PORTA |= (1 << PORTA0);
	}
	PORTA |= (1 << PORTA1);
 290:	8b b3       	in	r24, 0x1b	; 27
 292:	82 60       	ori	r24, 0x02	; 2
 294:	8b bb       	out	0x1b, r24	; 27
 296:	08 95       	ret

00000298 <output>:
}

void output()
{
 298:	0f 93       	push	r16
 29a:	1f 93       	push	r17
 29c:	cf 93       	push	r28
 29e:	df 93       	push	r29
	for(int i = 1; i <= 8; i++)
 2a0:	c1 e0       	ldi	r28, 0x01	; 1
 2a2:	d0 e0       	ldi	r29, 0x00	; 0
 2a4:	1f c0       	rjmp	.+62     	; 0x2e4 <output+0x4c>
	{
		write(i, space_1[i-1]);
 2a6:	8e 01       	movw	r16, r28
 2a8:	01 50       	subi	r16, 0x01	; 1
 2aa:	11 09       	sbc	r17, r1
 2ac:	f8 01       	movw	r30, r16
 2ae:	e2 59       	subi	r30, 0x92	; 146
 2b0:	fe 4f       	sbci	r31, 0xFE	; 254
 2b2:	60 81       	ld	r22, Z
 2b4:	8c 2f       	mov	r24, r28
 2b6:	85 df       	rcall	.-246    	; 0x1c2 <write>
		write(i, space_2[i-1]);
 2b8:	f8 01       	movw	r30, r16
 2ba:	ee 55       	subi	r30, 0x5E	; 94
 2bc:	fe 4f       	sbci	r31, 0xFE	; 254
 2be:	60 81       	ld	r22, Z
 2c0:	8c 2f       	mov	r24, r28
 2c2:	7f df       	rcall	.-258    	; 0x1c2 <write>
		write(i, space_3[i-1]);
 2c4:	f8 01       	movw	r30, r16
 2c6:	e6 55       	subi	r30, 0x56	; 86
 2c8:	fe 4f       	sbci	r31, 0xFE	; 254
 2ca:	60 81       	ld	r22, Z
 2cc:	8c 2f       	mov	r24, r28
 2ce:	79 df       	rcall	.-270    	; 0x1c2 <write>
		write(i, space_4[i-1]);
 2d0:	f8 01       	movw	r30, r16
 2d2:	e2 53       	subi	r30, 0x32	; 50
 2d4:	fe 4f       	sbci	r31, 0xFE	; 254
 2d6:	60 81       	ld	r22, Z
 2d8:	8c 2f       	mov	r24, r28
 2da:	73 df       	rcall	.-282    	; 0x1c2 <write>
		PORTA |= (1 << PORTA1);
 2dc:	8b b3       	in	r24, 0x1b	; 27
 2de:	82 60       	ori	r24, 0x02	; 2
 2e0:	8b bb       	out	0x1b, r24	; 27
	PORTA |= (1 << PORTA1);
}

void output()
{
	for(int i = 1; i <= 8; i++)
 2e2:	21 96       	adiw	r28, 0x01	; 1
 2e4:	c9 30       	cpi	r28, 0x09	; 9
 2e6:	d1 05       	cpc	r29, r1
 2e8:	f4 f2       	brlt	.-68     	; 0x2a6 <output+0xe>
		write(i, space_2[i-1]);
		write(i, space_3[i-1]);
		write(i, space_4[i-1]);
		PORTA |= (1 << PORTA1);
	}
}
 2ea:	df 91       	pop	r29
 2ec:	cf 91       	pop	r28
 2ee:	1f 91       	pop	r17
 2f0:	0f 91       	pop	r16
 2f2:	08 95       	ret

000002f4 <turn_check>:

void turn_check()
{
	if(temp[0] | temp[1] | temp[10] | temp[11])
 2f4:	e8 e2       	ldi	r30, 0x28	; 40
 2f6:	f1 e0       	ldi	r31, 0x01	; 1
 2f8:	40 81       	ld	r20, Z
 2fa:	51 81       	ldd	r21, Z+1	; 0x01
 2fc:	62 81       	ldd	r22, Z+2	; 0x02
 2fe:	73 81       	ldd	r23, Z+3	; 0x03
 300:	84 81       	ldd	r24, Z+4	; 0x04
 302:	95 81       	ldd	r25, Z+5	; 0x05
 304:	a6 81       	ldd	r26, Z+6	; 0x06
 306:	b7 81       	ldd	r27, Z+7	; 0x07
 308:	84 2b       	or	r24, r20
 30a:	95 2b       	or	r25, r21
 30c:	a6 2b       	or	r26, r22
 30e:	b7 2b       	or	r27, r23
 310:	40 a5       	ldd	r20, Z+40	; 0x28
 312:	51 a5       	ldd	r21, Z+41	; 0x29
 314:	62 a5       	ldd	r22, Z+42	; 0x2a
 316:	73 a5       	ldd	r23, Z+43	; 0x2b
 318:	84 2b       	or	r24, r20
 31a:	95 2b       	or	r25, r21
 31c:	a6 2b       	or	r26, r22
 31e:	b7 2b       	or	r27, r23
 320:	44 a5       	ldd	r20, Z+44	; 0x2c
 322:	55 a5       	ldd	r21, Z+45	; 0x2d
 324:	66 a5       	ldd	r22, Z+46	; 0x2e
 326:	77 a5       	ldd	r23, Z+47	; 0x2f
 328:	84 2b       	or	r24, r20
 32a:	95 2b       	or	r25, r21
 32c:	a6 2b       	or	r26, r22
 32e:	b7 2b       	or	r27, r23
 330:	89 2b       	or	r24, r25
 332:	8a 2b       	or	r24, r26
 334:	8b 2b       	or	r24, r27
 336:	09 f4       	brne	.+2      	; 0x33a <turn_check+0x46>
 338:	75 c0       	rjmp	.+234    	; 0x424 <__LOCK_REGION_LENGTH__+0x24>
	{
		if(status > 0) status--;
 33a:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <status>
 33e:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <status+0x1>
 342:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <status+0x2>
 346:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <status+0x3>
 34a:	00 97       	sbiw	r24, 0x00	; 0
 34c:	a1 05       	cpc	r26, r1
 34e:	b1 05       	cpc	r27, r1
 350:	61 f0       	breq	.+24     	; 0x36a <turn_check+0x76>
 352:	01 97       	sbiw	r24, 0x01	; 1
 354:	a1 09       	sbc	r26, r1
 356:	b1 09       	sbc	r27, r1
 358:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <status>
 35c:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <status+0x1>
 360:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <status+0x2>
 364:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <status+0x3>
 368:	08 95       	ret
		else status = 3;
 36a:	83 e0       	ldi	r24, 0x03	; 3
 36c:	90 e0       	ldi	r25, 0x00	; 0
 36e:	a0 e0       	ldi	r26, 0x00	; 0
 370:	b0 e0       	ldi	r27, 0x00	; 0
 372:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <status>
 376:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <status+0x1>
 37a:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <status+0x2>
 37e:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <status+0x3>
 382:	08 95       	ret
		return;
	}
	for(int i = 0; i < 8; i++)
	{
		if(space[i] & ((temp[i+2]) << down))
 384:	f9 01       	movw	r30, r18
 386:	ee 0f       	add	r30, r30
 388:	ff 1f       	adc	r31, r31
 38a:	ee 0f       	add	r30, r30
 38c:	ff 1f       	adc	r31, r31
 38e:	e6 58       	subi	r30, 0x86	; 134
 390:	fe 4f       	sbci	r31, 0xFE	; 254
 392:	40 81       	ld	r20, Z
 394:	51 81       	ldd	r21, Z+1	; 0x01
 396:	62 81       	ldd	r22, Z+2	; 0x02
 398:	73 81       	ldd	r23, Z+3	; 0x03
 39a:	f9 01       	movw	r30, r18
 39c:	32 96       	adiw	r30, 0x02	; 2
 39e:	ee 0f       	add	r30, r30
 3a0:	ff 1f       	adc	r31, r31
 3a2:	ee 0f       	add	r30, r30
 3a4:	ff 1f       	adc	r31, r31
 3a6:	e8 5d       	subi	r30, 0xD8	; 216
 3a8:	fe 4f       	sbci	r31, 0xFE	; 254
 3aa:	80 81       	ld	r24, Z
 3ac:	91 81       	ldd	r25, Z+1	; 0x01
 3ae:	a2 81       	ldd	r26, Z+2	; 0x02
 3b0:	b3 81       	ldd	r27, Z+3	; 0x03
 3b2:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <down>
 3b6:	04 c0       	rjmp	.+8      	; 0x3c0 <turn_check+0xcc>
 3b8:	88 0f       	add	r24, r24
 3ba:	99 1f       	adc	r25, r25
 3bc:	aa 1f       	adc	r26, r26
 3be:	bb 1f       	adc	r27, r27
 3c0:	0a 94       	dec	r0
 3c2:	d2 f7       	brpl	.-12     	; 0x3b8 <turn_check+0xc4>
 3c4:	84 23       	and	r24, r20
 3c6:	95 23       	and	r25, r21
 3c8:	a6 23       	and	r26, r22
 3ca:	b7 23       	and	r27, r23
 3cc:	89 2b       	or	r24, r25
 3ce:	8a 2b       	or	r24, r26
 3d0:	8b 2b       	or	r24, r27
 3d2:	29 f1       	breq	.+74     	; 0x41e <__LOCK_REGION_LENGTH__+0x1e>
		{
			if(status > 0) status--;
 3d4:	80 91 c2 01 	lds	r24, 0x01C2	; 0x8001c2 <status>
 3d8:	90 91 c3 01 	lds	r25, 0x01C3	; 0x8001c3 <status+0x1>
 3dc:	a0 91 c4 01 	lds	r26, 0x01C4	; 0x8001c4 <status+0x2>
 3e0:	b0 91 c5 01 	lds	r27, 0x01C5	; 0x8001c5 <status+0x3>
 3e4:	00 97       	sbiw	r24, 0x00	; 0
 3e6:	a1 05       	cpc	r26, r1
 3e8:	b1 05       	cpc	r27, r1
 3ea:	61 f0       	breq	.+24     	; 0x404 <__LOCK_REGION_LENGTH__+0x4>
 3ec:	01 97       	sbiw	r24, 0x01	; 1
 3ee:	a1 09       	sbc	r26, r1
 3f0:	b1 09       	sbc	r27, r1
 3f2:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <status>
 3f6:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <status+0x1>
 3fa:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <status+0x2>
 3fe:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <status+0x3>
 402:	08 95       	ret
			else status = 3;
 404:	83 e0       	ldi	r24, 0x03	; 3
 406:	90 e0       	ldi	r25, 0x00	; 0
 408:	a0 e0       	ldi	r26, 0x00	; 0
 40a:	b0 e0       	ldi	r27, 0x00	; 0
 40c:	80 93 c2 01 	sts	0x01C2, r24	; 0x8001c2 <status>
 410:	90 93 c3 01 	sts	0x01C3, r25	; 0x8001c3 <status+0x1>
 414:	a0 93 c4 01 	sts	0x01C4, r26	; 0x8001c4 <status+0x2>
 418:	b0 93 c5 01 	sts	0x01C5, r27	; 0x8001c5 <status+0x3>
 41c:	08 95       	ret
	{
		if(status > 0) status--;
		else status = 3;
		return;
	}
	for(int i = 0; i < 8; i++)
 41e:	2f 5f       	subi	r18, 0xFF	; 255
 420:	3f 4f       	sbci	r19, 0xFF	; 255
 422:	02 c0       	rjmp	.+4      	; 0x428 <__LOCK_REGION_LENGTH__+0x28>
 424:	20 e0       	ldi	r18, 0x00	; 0
 426:	30 e0       	ldi	r19, 0x00	; 0
 428:	28 30       	cpi	r18, 0x08	; 8
 42a:	31 05       	cpc	r19, r1
 42c:	0c f4       	brge	.+2      	; 0x430 <__LOCK_REGION_LENGTH__+0x30>
 42e:	aa cf       	rjmp	.-172    	; 0x384 <turn_check+0x90>
 430:	08 95       	ret

00000432 <left>:
	}
}

void left()
{
	if(!(temp[0] | temp[1] | temp[2]))
 432:	e8 e2       	ldi	r30, 0x28	; 40
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	40 81       	ld	r20, Z
 438:	51 81       	ldd	r21, Z+1	; 0x01
 43a:	62 81       	ldd	r22, Z+2	; 0x02
 43c:	73 81       	ldd	r23, Z+3	; 0x03
 43e:	84 81       	ldd	r24, Z+4	; 0x04
 440:	95 81       	ldd	r25, Z+5	; 0x05
 442:	a6 81       	ldd	r26, Z+6	; 0x06
 444:	b7 81       	ldd	r27, Z+7	; 0x07
 446:	84 2b       	or	r24, r20
 448:	95 2b       	or	r25, r21
 44a:	a6 2b       	or	r26, r22
 44c:	b7 2b       	or	r27, r23
 44e:	40 85       	ldd	r20, Z+8	; 0x08
 450:	51 85       	ldd	r21, Z+9	; 0x09
 452:	62 85       	ldd	r22, Z+10	; 0x0a
 454:	73 85       	ldd	r23, Z+11	; 0x0b
 456:	84 2b       	or	r24, r20
 458:	95 2b       	or	r25, r21
 45a:	a6 2b       	or	r26, r22
 45c:	b7 2b       	or	r27, r23
 45e:	89 2b       	or	r24, r25
 460:	8a 2b       	or	r24, r26
 462:	8b 2b       	or	r24, r27
 464:	e9 f0       	breq	.+58     	; 0x4a0 <left+0x6e>
 466:	22 c0       	rjmp	.+68     	; 0x4ac <left+0x7a>
	{
		for (int i = 0; i < 8; i++)
		{
			temp[i+1] = temp[i+2];
 468:	9c 01       	movw	r18, r24
 46a:	2f 5f       	subi	r18, 0xFF	; 255
 46c:	3f 4f       	sbci	r19, 0xFF	; 255
 46e:	fc 01       	movw	r30, r24
 470:	32 96       	adiw	r30, 0x02	; 2
 472:	ee 0f       	add	r30, r30
 474:	ff 1f       	adc	r31, r31
 476:	ee 0f       	add	r30, r30
 478:	ff 1f       	adc	r31, r31
 47a:	e8 5d       	subi	r30, 0xD8	; 216
 47c:	fe 4f       	sbci	r31, 0xFE	; 254
 47e:	80 81       	ld	r24, Z
 480:	91 81       	ldd	r25, Z+1	; 0x01
 482:	a2 81       	ldd	r26, Z+2	; 0x02
 484:	b3 81       	ldd	r27, Z+3	; 0x03
 486:	f9 01       	movw	r30, r18
 488:	ee 0f       	add	r30, r30
 48a:	ff 1f       	adc	r31, r31
 48c:	ee 0f       	add	r30, r30
 48e:	ff 1f       	adc	r31, r31
 490:	e8 5d       	subi	r30, 0xD8	; 216
 492:	fe 4f       	sbci	r31, 0xFE	; 254
 494:	80 83       	st	Z, r24
 496:	91 83       	std	Z+1, r25	; 0x01
 498:	a2 83       	std	Z+2, r26	; 0x02
 49a:	b3 83       	std	Z+3, r27	; 0x03

void left()
{
	if(!(temp[0] | temp[1] | temp[2]))
	{
		for (int i = 0; i < 8; i++)
 49c:	c9 01       	movw	r24, r18
 49e:	02 c0       	rjmp	.+4      	; 0x4a4 <left+0x72>
 4a0:	80 e0       	ldi	r24, 0x00	; 0
 4a2:	90 e0       	ldi	r25, 0x00	; 0
 4a4:	88 30       	cpi	r24, 0x08	; 8
 4a6:	91 05       	cpc	r25, r1
 4a8:	fc f2       	brlt	.-66     	; 0x468 <left+0x36>
 4aa:	08 95       	ret
		{
			temp[i+1] = temp[i+2];
		}
	}
	else
		m3--;
 4ac:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <m3>
 4b0:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <m3+0x1>
 4b4:	01 97       	sbiw	r24, 0x01	; 1
 4b6:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <m3+0x1>
 4ba:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <m3>
 4be:	08 95       	ret

000004c0 <right>:
}

void right()
{
	if(!(temp[9] | temp[10] | temp[11]))
 4c0:	e8 e2       	ldi	r30, 0x28	; 40
 4c2:	f1 e0       	ldi	r31, 0x01	; 1
 4c4:	44 a1       	ldd	r20, Z+36	; 0x24
 4c6:	55 a1       	ldd	r21, Z+37	; 0x25
 4c8:	66 a1       	ldd	r22, Z+38	; 0x26
 4ca:	77 a1       	ldd	r23, Z+39	; 0x27
 4cc:	80 a5       	ldd	r24, Z+40	; 0x28
 4ce:	91 a5       	ldd	r25, Z+41	; 0x29
 4d0:	a2 a5       	ldd	r26, Z+42	; 0x2a
 4d2:	b3 a5       	ldd	r27, Z+43	; 0x2b
 4d4:	84 2b       	or	r24, r20
 4d6:	95 2b       	or	r25, r21
 4d8:	a6 2b       	or	r26, r22
 4da:	b7 2b       	or	r27, r23
 4dc:	44 a5       	ldd	r20, Z+44	; 0x2c
 4de:	55 a5       	ldd	r21, Z+45	; 0x2d
 4e0:	66 a5       	ldd	r22, Z+46	; 0x2e
 4e2:	77 a5       	ldd	r23, Z+47	; 0x2f
 4e4:	84 2b       	or	r24, r20
 4e6:	95 2b       	or	r25, r21
 4e8:	a6 2b       	or	r26, r22
 4ea:	b7 2b       	or	r27, r23
 4ec:	89 2b       	or	r24, r25
 4ee:	8a 2b       	or	r24, r26
 4f0:	8b 2b       	or	r24, r27
 4f2:	d9 f0       	breq	.+54     	; 0x52a <right+0x6a>
 4f4:	1f c0       	rjmp	.+62     	; 0x534 <right+0x74>
	{
		for (int i = 7; i >= 0; i--)
		{
			temp[i+2] = temp[i+1];
 4f6:	fc 01       	movw	r30, r24
 4f8:	32 96       	adiw	r30, 0x02	; 2
 4fa:	dc 01       	movw	r26, r24
 4fc:	11 96       	adiw	r26, 0x01	; 1
 4fe:	aa 0f       	add	r26, r26
 500:	bb 1f       	adc	r27, r27
 502:	aa 0f       	add	r26, r26
 504:	bb 1f       	adc	r27, r27
 506:	a8 5d       	subi	r26, 0xD8	; 216
 508:	be 4f       	sbci	r27, 0xFE	; 254
 50a:	4d 91       	ld	r20, X+
 50c:	5d 91       	ld	r21, X+
 50e:	6d 91       	ld	r22, X+
 510:	7c 91       	ld	r23, X
 512:	ee 0f       	add	r30, r30
 514:	ff 1f       	adc	r31, r31
 516:	ee 0f       	add	r30, r30
 518:	ff 1f       	adc	r31, r31
 51a:	e8 5d       	subi	r30, 0xD8	; 216
 51c:	fe 4f       	sbci	r31, 0xFE	; 254
 51e:	40 83       	st	Z, r20
 520:	51 83       	std	Z+1, r21	; 0x01
 522:	62 83       	std	Z+2, r22	; 0x02
 524:	73 83       	std	Z+3, r23	; 0x03

void right()
{
	if(!(temp[9] | temp[10] | temp[11]))
	{
		for (int i = 7; i >= 0; i--)
 526:	01 97       	sbiw	r24, 0x01	; 1
 528:	02 c0       	rjmp	.+4      	; 0x52e <right+0x6e>
 52a:	87 e0       	ldi	r24, 0x07	; 7
 52c:	90 e0       	ldi	r25, 0x00	; 0
 52e:	99 23       	and	r25, r25
 530:	14 f7       	brge	.-60     	; 0x4f6 <right+0x36>
 532:	08 95       	ret
		{
			temp[i+2] = temp[i+1];
		}
	}
	else
		m4--;
 534:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <m4>
 538:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <m4+0x1>
 53c:	01 97       	sbiw	r24, 0x01	; 1
 53e:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <m4+0x1>
 542:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <m4>
 546:	08 95       	ret

00000548 <side_check>:
}

void side_check()
{	
 548:	cf 93       	push	r28
 54a:	df 93       	push	r29
	if(m3 > m4)
 54c:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <m3>
 550:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <m3+0x1>
 554:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <m4>
 558:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <m4+0x1>
 55c:	82 17       	cp	r24, r18
 55e:	93 07       	cpc	r25, r19
 560:	24 f0       	brlt	.+8      	; 0x56a <side_check+0x22>
 562:	12 c0       	rjmp	.+36     	; 0x588 <side_check+0x40>
		for(int i = 1; i <= m3-m4; i++)
			left();
 564:	66 df       	rcall	.-308    	; 0x432 <left>
}

void side_check()
{	
	if(m3 > m4)
		for(int i = 1; i <= m3-m4; i++)
 566:	21 96       	adiw	r28, 0x01	; 1
 568:	02 c0       	rjmp	.+4      	; 0x56e <side_check+0x26>
 56a:	c1 e0       	ldi	r28, 0x01	; 1
 56c:	d0 e0       	ldi	r29, 0x00	; 0
 56e:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <m3>
 572:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <m3+0x1>
 576:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <m4>
 57a:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <m4+0x1>
 57e:	82 1b       	sub	r24, r18
 580:	93 0b       	sbc	r25, r19
 582:	8c 17       	cp	r24, r28
 584:	9d 07       	cpc	r25, r29
 586:	74 f7       	brge	.-36     	; 0x564 <side_check+0x1c>
			left();
	if(m4 > m3) 
 588:	20 91 6a 01 	lds	r18, 0x016A	; 0x80016a <m4>
 58c:	30 91 6b 01 	lds	r19, 0x016B	; 0x80016b <m4+0x1>
 590:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <m3>
 594:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <m3+0x1>
 598:	82 17       	cp	r24, r18
 59a:	93 07       	cpc	r25, r19
 59c:	24 f0       	brlt	.+8      	; 0x5a6 <side_check+0x5e>
		for(int i = 1; i <= m4-m3; i++)
			right();
 59e:	12 c0       	rjmp	.+36     	; 0x5c4 <side_check+0x7c>
 5a0:	8f df       	rcall	.-226    	; 0x4c0 <right>
{	
	if(m3 > m4)
		for(int i = 1; i <= m3-m4; i++)
			left();
	if(m4 > m3) 
		for(int i = 1; i <= m4-m3; i++)
 5a2:	21 96       	adiw	r28, 0x01	; 1
 5a4:	02 c0       	rjmp	.+4      	; 0x5aa <side_check+0x62>
 5a6:	c1 e0       	ldi	r28, 0x01	; 1
 5a8:	d0 e0       	ldi	r29, 0x00	; 0
 5aa:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <m4>
 5ae:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <m4+0x1>
 5b2:	20 91 c0 01 	lds	r18, 0x01C0	; 0x8001c0 <m3>
 5b6:	30 91 c1 01 	lds	r19, 0x01C1	; 0x8001c1 <m3+0x1>
 5ba:	82 1b       	sub	r24, r18
 5bc:	93 0b       	sbc	r25, r19
 5be:	8c 17       	cp	r24, r28
 5c0:	9d 07       	cpc	r25, r29
 5c2:	74 f7       	brge	.-36     	; 0x5a0 <side_check+0x58>
			right();
}
 5c4:	df 91       	pop	r29
 5c6:	cf 91       	pop	r28
 5c8:	08 95       	ret

000005ca <down_check>:

void down_check()
{
 5ca:	cf 92       	push	r12
 5cc:	df 92       	push	r13
 5ce:	ef 92       	push	r14
 5d0:	ff 92       	push	r15
 5d2:	0f 93       	push	r16
 5d4:	1f 93       	push	r17
 5d6:	cf 93       	push	r28
 5d8:	df 93       	push	r29
	m1 = 0, m2 = 0;
 5da:	10 92 b3 01 	sts	0x01B3, r1	; 0x8001b3 <m1+0x1>
 5de:	10 92 b2 01 	sts	0x01B2, r1	; 0x8001b2 <m1>
 5e2:	10 92 6d 01 	sts	0x016D, r1	; 0x80016d <m2+0x1>
 5e6:	10 92 6c 01 	sts	0x016C, r1	; 0x80016c <m2>
	for(int i = 0; i < 8; i++)
 5ea:	20 e0       	ldi	r18, 0x00	; 0
 5ec:	30 e0       	ldi	r19, 0x00	; 0
 5ee:	43 c0       	rjmp	.+134    	; 0x676 <down_check+0xac>
		if(space[i] & (temp[i+2] << down))
 5f0:	f9 01       	movw	r30, r18
 5f2:	ee 0f       	add	r30, r30
 5f4:	ff 1f       	adc	r31, r31
 5f6:	ee 0f       	add	r30, r30
 5f8:	ff 1f       	adc	r31, r31
 5fa:	e6 58       	subi	r30, 0x86	; 134
 5fc:	fe 4f       	sbci	r31, 0xFE	; 254
 5fe:	c0 80       	ld	r12, Z
 600:	d1 80       	ldd	r13, Z+1	; 0x01
 602:	e2 80       	ldd	r14, Z+2	; 0x02
 604:	f3 80       	ldd	r15, Z+3	; 0x03
 606:	f9 01       	movw	r30, r18
 608:	32 96       	adiw	r30, 0x02	; 2
 60a:	ee 0f       	add	r30, r30
 60c:	ff 1f       	adc	r31, r31
 60e:	ee 0f       	add	r30, r30
 610:	ff 1f       	adc	r31, r31
 612:	e8 5d       	subi	r30, 0xD8	; 216
 614:	fe 4f       	sbci	r31, 0xFE	; 254
 616:	80 81       	ld	r24, Z
 618:	91 81       	ldd	r25, Z+1	; 0x01
 61a:	a2 81       	ldd	r26, Z+2	; 0x02
 61c:	b3 81       	ldd	r27, Z+3	; 0x03
 61e:	40 91 76 01 	lds	r20, 0x0176	; 0x800176 <down>
 622:	50 91 77 01 	lds	r21, 0x0177	; 0x800177 <down+0x1>
 626:	60 91 78 01 	lds	r22, 0x0178	; 0x800178 <down+0x2>
 62a:	70 91 79 01 	lds	r23, 0x0179	; 0x800179 <down+0x3>
 62e:	04 2e       	mov	r0, r20
 630:	04 c0       	rjmp	.+8      	; 0x63a <down_check+0x70>
 632:	88 0f       	add	r24, r24
 634:	99 1f       	adc	r25, r25
 636:	aa 1f       	adc	r26, r26
 638:	bb 1f       	adc	r27, r27
 63a:	0a 94       	dec	r0
 63c:	d2 f7       	brpl	.-12     	; 0x632 <down_check+0x68>
 63e:	8c 21       	and	r24, r12
 640:	9d 21       	and	r25, r13
 642:	ae 21       	and	r26, r14
 644:	bf 21       	and	r27, r15
 646:	89 2b       	or	r24, r25
 648:	8a 2b       	or	r24, r26
 64a:	8b 2b       	or	r24, r27
 64c:	91 f0       	breq	.+36     	; 0x672 <down_check+0xa8>
		{
			down--;
 64e:	41 50       	subi	r20, 0x01	; 1
 650:	51 09       	sbc	r21, r1
 652:	61 09       	sbc	r22, r1
 654:	71 09       	sbc	r23, r1
 656:	40 93 76 01 	sts	0x0176, r20	; 0x800176 <down>
 65a:	50 93 77 01 	sts	0x0177, r21	; 0x800177 <down+0x1>
 65e:	60 93 78 01 	sts	0x0178, r22	; 0x800178 <down+0x2>
 662:	70 93 79 01 	sts	0x0179, r23	; 0x800179 <down+0x3>
			m2 = 1;
 666:	81 e0       	ldi	r24, 0x01	; 1
 668:	90 e0       	ldi	r25, 0x00	; 0
 66a:	90 93 6d 01 	sts	0x016D, r25	; 0x80016d <m2+0x1>
 66e:	80 93 6c 01 	sts	0x016C, r24	; 0x80016c <m2>
}

void down_check()
{
	m1 = 0, m2 = 0;
	for(int i = 0; i < 8; i++)
 672:	2f 5f       	subi	r18, 0xFF	; 255
 674:	3f 4f       	sbci	r19, 0xFF	; 255
 676:	28 30       	cpi	r18, 0x08	; 8
 678:	31 05       	cpc	r19, r1
 67a:	0c f4       	brge	.+2      	; 0x67e <down_check+0xb4>
 67c:	b9 cf       	rjmp	.-142    	; 0x5f0 <down_check+0x26>
		if(space[i] & (temp[i+2] << down))
		{
			down--;
			m2 = 1;
		}
	if(m2)
 67e:	80 91 6c 01 	lds	r24, 0x016C	; 0x80016c <m2>
 682:	90 91 6d 01 	lds	r25, 0x016D	; 0x80016d <m2+0x1>
 686:	89 2b       	or	r24, r25
 688:	89 f5       	brne	.+98     	; 0x6ec <down_check+0x122>
 68a:	a0 e0       	ldi	r26, 0x00	; 0
 68c:	b0 e0       	ldi	r27, 0x00	; 0
 68e:	dd c0       	rjmp	.+442    	; 0x84a <down_check+0x280>
	{
		for(int j = 0; j < 8; j++)
		{
			temp[j+2] = ((temp[j+2] << (down)));
 690:	f9 01       	movw	r30, r18
 692:	32 96       	adiw	r30, 0x02	; 2
 694:	ee 0f       	add	r30, r30
 696:	ff 1f       	adc	r31, r31
 698:	ee 0f       	add	r30, r30
 69a:	ff 1f       	adc	r31, r31
 69c:	e8 5d       	subi	r30, 0xD8	; 216
 69e:	fe 4f       	sbci	r31, 0xFE	; 254
 6a0:	80 81       	ld	r24, Z
 6a2:	91 81       	ldd	r25, Z+1	; 0x01
 6a4:	a2 81       	ldd	r26, Z+2	; 0x02
 6a6:	b3 81       	ldd	r27, Z+3	; 0x03
 6a8:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <down>
 6ac:	04 c0       	rjmp	.+8      	; 0x6b6 <down_check+0xec>
 6ae:	88 0f       	add	r24, r24
 6b0:	99 1f       	adc	r25, r25
 6b2:	aa 1f       	adc	r26, r26
 6b4:	bb 1f       	adc	r27, r27
 6b6:	0a 94       	dec	r0
 6b8:	d2 f7       	brpl	.-12     	; 0x6ae <down_check+0xe4>
 6ba:	80 83       	st	Z, r24
 6bc:	91 83       	std	Z+1, r25	; 0x01
 6be:	a2 83       	std	Z+2, r26	; 0x02
 6c0:	b3 83       	std	Z+3, r27	; 0x03
			display_4[j] |= (temp[j+2] << 8) >> 24;
 6c2:	f9 01       	movw	r30, r18
 6c4:	ea 53       	subi	r30, 0x3A	; 58
 6c6:	fe 4f       	sbci	r31, 0xFE	; 254
 6c8:	40 81       	ld	r20, Z
 6ca:	4a 2b       	or	r20, r26
 6cc:	40 83       	st	Z, r20
			display_3[j] |= (temp[j+2] << 16) >> 24;
 6ce:	f9 01       	movw	r30, r18
 6d0:	ec 54       	subi	r30, 0x4C	; 76
 6d2:	fe 4f       	sbci	r31, 0xFE	; 254
 6d4:	40 81       	ld	r20, Z
 6d6:	49 2b       	or	r20, r25
 6d8:	40 83       	st	Z, r20
			display_2[j] |= (temp[j+2] << 24) >> 24;
 6da:	f9 01       	movw	r30, r18
 6dc:	e6 5a       	subi	r30, 0xA6	; 166
 6de:	fe 4f       	sbci	r31, 0xFE	; 254
 6e0:	40 81       	ld	r20, Z
 6e2:	84 2b       	or	r24, r20
 6e4:	80 83       	st	Z, r24
			down--;
			m2 = 1;
		}
	if(m2)
	{
		for(int j = 0; j < 8; j++)
 6e6:	2f 5f       	subi	r18, 0xFF	; 255
 6e8:	3f 4f       	sbci	r19, 0xFF	; 255
 6ea:	02 c0       	rjmp	.+4      	; 0x6f0 <down_check+0x126>
 6ec:	20 e0       	ldi	r18, 0x00	; 0
 6ee:	30 e0       	ldi	r19, 0x00	; 0
 6f0:	28 30       	cpi	r18, 0x08	; 8
 6f2:	31 05       	cpc	r19, r1
 6f4:	6c f2       	brlt	.-102    	; 0x690 <down_check+0xc6>
			temp[j+2] = ((temp[j+2] << (down)));
			display_4[j] |= (temp[j+2] << 8) >> 24;
			display_3[j] |= (temp[j+2] << 16) >> 24;
			display_2[j] |= (temp[j+2] << 24) >> 24;
		}
		down = 0;
 6f6:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <down>
 6fa:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <down+0x1>
 6fe:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <down+0x2>
 702:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <down+0x3>
		return;
 706:	a5 c0       	rjmp	.+330    	; 0x852 <down_check+0x288>
	}
	for(int i = 0; i < 8; i++)
	{
		if((temp[i+2] << down) >> 24)
 708:	fd 01       	movw	r30, r26
 70a:	32 96       	adiw	r30, 0x02	; 2
 70c:	ee 0f       	add	r30, r30
 70e:	ff 1f       	adc	r31, r31
 710:	ee 0f       	add	r30, r30
 712:	ff 1f       	adc	r31, r31
 714:	e8 5d       	subi	r30, 0xD8	; 216
 716:	fe 4f       	sbci	r31, 0xFE	; 254
 718:	40 81       	ld	r20, Z
 71a:	51 81       	ldd	r21, Z+1	; 0x01
 71c:	62 81       	ldd	r22, Z+2	; 0x02
 71e:	73 81       	ldd	r23, Z+3	; 0x03
 720:	00 91 76 01 	lds	r16, 0x0176	; 0x800176 <down>
 724:	10 91 77 01 	lds	r17, 0x0177	; 0x800177 <down+0x1>
 728:	20 91 78 01 	lds	r18, 0x0178	; 0x800178 <down+0x2>
 72c:	30 91 79 01 	lds	r19, 0x0179	; 0x800179 <down+0x3>
 730:	00 2e       	mov	r0, r16
 732:	04 c0       	rjmp	.+8      	; 0x73c <down_check+0x172>
 734:	44 0f       	add	r20, r20
 736:	55 1f       	adc	r21, r21
 738:	66 1f       	adc	r22, r22
 73a:	77 1f       	adc	r23, r23
 73c:	0a 94       	dec	r0
 73e:	d2 f7       	brpl	.-12     	; 0x734 <down_check+0x16a>
 740:	47 2f       	mov	r20, r23
 742:	55 27       	eor	r21, r21
 744:	66 27       	eor	r22, r22
 746:	77 27       	eor	r23, r23
 748:	45 2b       	or	r20, r21
 74a:	46 2b       	or	r20, r22
 74c:	47 2b       	or	r20, r23
 74e:	a1 f0       	breq	.+40     	; 0x778 <down_check+0x1ae>
		{
			down--;
 750:	01 50       	subi	r16, 0x01	; 1
 752:	11 09       	sbc	r17, r1
 754:	21 09       	sbc	r18, r1
 756:	31 09       	sbc	r19, r1
 758:	00 93 76 01 	sts	0x0176, r16	; 0x800176 <down>
 75c:	10 93 77 01 	sts	0x0177, r17	; 0x800177 <down+0x1>
 760:	20 93 78 01 	sts	0x0178, r18	; 0x800178 <down+0x2>
 764:	30 93 79 01 	sts	0x0179, r19	; 0x800179 <down+0x3>
			m1 = 1;
 768:	81 e0       	ldi	r24, 0x01	; 1
 76a:	90 e0       	ldi	r25, 0x00	; 0
 76c:	90 93 b3 01 	sts	0x01B3, r25	; 0x8001b3 <m1+0x1>
 770:	80 93 b2 01 	sts	0x01B2, r24	; 0x8001b2 <m1>
			i = 0;
 774:	a0 e0       	ldi	r26, 0x00	; 0
 776:	b0 e0       	ldi	r27, 0x00	; 0
		}
		if(m1)
 778:	c0 91 b2 01 	lds	r28, 0x01B2	; 0x8001b2 <m1>
 77c:	d0 91 b3 01 	lds	r29, 0x01B3	; 0x8001b3 <m1+0x1>
 780:	20 97       	sbiw	r28, 0x00	; 0
 782:	f1 f4       	brne	.+60     	; 0x7c0 <down_check+0x1f6>
 784:	22 c0       	rjmp	.+68     	; 0x7ca <down_check+0x200>
		{
			for(int j = 0; j < 8; j++)
			{
				unsigned char temp1 = ((temp[j+2] << (down)) >> 16);
 786:	fc 01       	movw	r30, r24
 788:	32 96       	adiw	r30, 0x02	; 2
 78a:	ee 0f       	add	r30, r30
 78c:	ff 1f       	adc	r31, r31
 78e:	ee 0f       	add	r30, r30
 790:	ff 1f       	adc	r31, r31
 792:	e8 5d       	subi	r30, 0xD8	; 216
 794:	fe 4f       	sbci	r31, 0xFE	; 254
 796:	40 81       	ld	r20, Z
 798:	51 81       	ldd	r21, Z+1	; 0x01
 79a:	62 81       	ldd	r22, Z+2	; 0x02
 79c:	73 81       	ldd	r23, Z+3	; 0x03
 79e:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <down>
 7a2:	04 c0       	rjmp	.+8      	; 0x7ac <down_check+0x1e2>
 7a4:	44 0f       	add	r20, r20
 7a6:	55 1f       	adc	r21, r21
 7a8:	66 1f       	adc	r22, r22
 7aa:	77 1f       	adc	r23, r23
 7ac:	0a 94       	dec	r0
 7ae:	d2 f7       	brpl	.-12     	; 0x7a4 <down_check+0x1da>
				display_4[j] |= temp1;
 7b0:	fc 01       	movw	r30, r24
 7b2:	ea 53       	subi	r30, 0x3A	; 58
 7b4:	fe 4f       	sbci	r31, 0xFE	; 254
 7b6:	20 81       	ld	r18, Z
 7b8:	26 2b       	or	r18, r22
 7ba:	20 83       	st	Z, r18
			m1 = 1;
			i = 0;
		}
		if(m1)
		{
			for(int j = 0; j < 8; j++)
 7bc:	01 96       	adiw	r24, 0x01	; 1
 7be:	02 c0       	rjmp	.+4      	; 0x7c4 <down_check+0x1fa>
 7c0:	80 e0       	ldi	r24, 0x00	; 0
 7c2:	90 e0       	ldi	r25, 0x00	; 0
 7c4:	88 30       	cpi	r24, 0x08	; 8
 7c6:	91 05       	cpc	r25, r1
 7c8:	f4 f2       	brlt	.-68     	; 0x786 <down_check+0x1bc>
			{
				unsigned char temp1 = ((temp[j+2] << (down)) >> 16);
				display_4[j] |= temp1;
			}
		}
		if(i == 7)
 7ca:	a7 30       	cpi	r26, 0x07	; 7
 7cc:	b1 05       	cpc	r27, r1
 7ce:	e1 f5       	brne	.+120    	; 0x848 <down_check+0x27e>
		{
			if(m1)
 7d0:	cd 2b       	or	r28, r29
 7d2:	41 f0       	breq	.+16     	; 0x7e4 <down_check+0x21a>
				down = 0;
 7d4:	10 92 76 01 	sts	0x0176, r1	; 0x800176 <down>
 7d8:	10 92 77 01 	sts	0x0177, r1	; 0x800177 <down+0x1>
 7dc:	10 92 78 01 	sts	0x0178, r1	; 0x800178 <down+0x2>
 7e0:	10 92 79 01 	sts	0x0179, r1	; 0x800179 <down+0x3>
 7e4:	20 e0       	ldi	r18, 0x00	; 0
 7e6:	30 e0       	ldi	r19, 0x00	; 0
 7e8:	2b c0       	rjmp	.+86     	; 0x840 <down_check+0x276>
			for(int i = 0; i < 8; i++)
				space[i] = space[i] | (temp[i+2] << down);
 7ea:	f9 01       	movw	r30, r18
 7ec:	ee 0f       	add	r30, r30
 7ee:	ff 1f       	adc	r31, r31
 7f0:	ee 0f       	add	r30, r30
 7f2:	ff 1f       	adc	r31, r31
 7f4:	e6 58       	subi	r30, 0x86	; 134
 7f6:	fe 4f       	sbci	r31, 0xFE	; 254
 7f8:	40 81       	ld	r20, Z
 7fa:	51 81       	ldd	r21, Z+1	; 0x01
 7fc:	62 81       	ldd	r22, Z+2	; 0x02
 7fe:	73 81       	ldd	r23, Z+3	; 0x03
 800:	d9 01       	movw	r26, r18
 802:	12 96       	adiw	r26, 0x02	; 2
 804:	aa 0f       	add	r26, r26
 806:	bb 1f       	adc	r27, r27
 808:	aa 0f       	add	r26, r26
 80a:	bb 1f       	adc	r27, r27
 80c:	a8 5d       	subi	r26, 0xD8	; 216
 80e:	be 4f       	sbci	r27, 0xFE	; 254
 810:	8d 91       	ld	r24, X+
 812:	9d 91       	ld	r25, X+
 814:	0d 90       	ld	r0, X+
 816:	bc 91       	ld	r27, X
 818:	a0 2d       	mov	r26, r0
 81a:	00 90 76 01 	lds	r0, 0x0176	; 0x800176 <down>
 81e:	04 c0       	rjmp	.+8      	; 0x828 <down_check+0x25e>
 820:	88 0f       	add	r24, r24
 822:	99 1f       	adc	r25, r25
 824:	aa 1f       	adc	r26, r26
 826:	bb 1f       	adc	r27, r27
 828:	0a 94       	dec	r0
 82a:	d2 f7       	brpl	.-12     	; 0x820 <down_check+0x256>
 82c:	84 2b       	or	r24, r20
 82e:	95 2b       	or	r25, r21
 830:	a6 2b       	or	r26, r22
 832:	b7 2b       	or	r27, r23
 834:	80 83       	st	Z, r24
 836:	91 83       	std	Z+1, r25	; 0x01
 838:	a2 83       	std	Z+2, r26	; 0x02
 83a:	b3 83       	std	Z+3, r27	; 0x03
		}
		if(i == 7)
		{
			if(m1)
				down = 0;
			for(int i = 0; i < 8; i++)
 83c:	2f 5f       	subi	r18, 0xFF	; 255
 83e:	3f 4f       	sbci	r19, 0xFF	; 255
 840:	28 30       	cpi	r18, 0x08	; 8
 842:	31 05       	cpc	r19, r1
 844:	94 f2       	brlt	.-92     	; 0x7ea <down_check+0x220>
 846:	05 c0       	rjmp	.+10     	; 0x852 <down_check+0x288>
			display_2[j] |= (temp[j+2] << 24) >> 24;
		}
		down = 0;
		return;
	}
	for(int i = 0; i < 8; i++)
 848:	11 96       	adiw	r26, 0x01	; 1
 84a:	a8 30       	cpi	r26, 0x08	; 8
 84c:	b1 05       	cpc	r27, r1
 84e:	0c f4       	brge	.+2      	; 0x852 <down_check+0x288>
 850:	5b cf       	rjmp	.-330    	; 0x708 <down_check+0x13e>
			for(int i = 0; i < 8; i++)
				space[i] = space[i] | (temp[i+2] << down);
			return;
		}
	}
}
 852:	df 91       	pop	r29
 854:	cf 91       	pop	r28
 856:	1f 91       	pop	r17
 858:	0f 91       	pop	r16
 85a:	ff 90       	pop	r15
 85c:	ef 90       	pop	r14
 85e:	df 90       	pop	r13
 860:	cf 90       	pop	r12
 862:	08 95       	ret

00000864 <main>:

int main(void)
{
	DDRA = 0x07;
 864:	87 e0       	ldi	r24, 0x07	; 7
 866:	8a bb       	out	0x1a, r24	; 26
	TCNT0 = 254;
 868:	8e ef       	ldi	r24, 0xFE	; 254
 86a:	82 bf       	out	0x32, r24	; 50
	TCCR0 = 0x01;
 86c:	81 e0       	ldi	r24, 0x01	; 1
 86e:	83 bf       	out	0x33, r24	; 51
	TCCR2 = 0x02;
 870:	82 e0       	ldi	r24, 0x02	; 2
 872:	85 bd       	out	0x25, r24	; 37
	TIMSK = 0x41;
 874:	81 e4       	ldi	r24, 0x41	; 65
 876:	87 bf       	out	0x37, r24	; 55
	sei();
 878:	78 94       	sei
	
	w(0x09, 0x00);
 87a:	60 e0       	ldi	r22, 0x00	; 0
 87c:	89 e0       	ldi	r24, 0x09	; 9
 87e:	d5 dc       	rcall	.-1622   	; 0x22a <w>
	w(0x0A, 0x01);
 880:	61 e0       	ldi	r22, 0x01	; 1
 882:	8a e0       	ldi	r24, 0x0A	; 10
 884:	d2 dc       	rcall	.-1628   	; 0x22a <w>
	w(0x0B, 0x07);
 886:	67 e0       	ldi	r22, 0x07	; 7
 888:	8b e0       	ldi	r24, 0x0B	; 11
 88a:	cf dc       	rcall	.-1634   	; 0x22a <w>
	w(0x0C, 0x01);
 88c:	61 e0       	ldi	r22, 0x01	; 1
 88e:	8c e0       	ldi	r24, 0x0C	; 12
 890:	cc dc       	rcall	.-1640   	; 0x22a <w>
	w(0x0F, 0x00);
 892:	60 e0       	ldi	r22, 0x00	; 0
 894:	8f e0       	ldi	r24, 0x0F	; 15
 896:	c9 dc       	rcall	.-1646   	; 0x22a <w>
 898:	c1 e0       	ldi	r28, 0x01	; 1
	
	for(int i = 1; i <= 8; i++)
 89a:	d0 e0       	ldi	r29, 0x00	; 0
 89c:	1c c0       	rjmp	.+56     	; 0x8d6 <main+0x72>
 89e:	8e 01       	movw	r16, r28
	{
		w(i, display_1[i-1]);
 8a0:	01 50       	subi	r16, 0x01	; 1
 8a2:	11 09       	sbc	r17, r1
 8a4:	f8 01       	movw	r30, r16
 8a6:	e6 56       	subi	r30, 0x66	; 102
 8a8:	fe 4f       	sbci	r31, 0xFE	; 254
 8aa:	60 81       	ld	r22, Z
 8ac:	8c 2f       	mov	r24, r28
 8ae:	bd dc       	rcall	.-1670   	; 0x22a <w>
 8b0:	f8 01       	movw	r30, r16
		w(i, display_2[i-1]);
 8b2:	e6 5a       	subi	r30, 0xA6	; 166
 8b4:	fe 4f       	sbci	r31, 0xFE	; 254
 8b6:	60 81       	ld	r22, Z
 8b8:	8c 2f       	mov	r24, r28
 8ba:	b7 dc       	rcall	.-1682   	; 0x22a <w>
 8bc:	f8 01       	movw	r30, r16
		w(i, display_3[i-1]);
 8be:	ec 54       	subi	r30, 0x4C	; 76
 8c0:	fe 4f       	sbci	r31, 0xFE	; 254
 8c2:	60 81       	ld	r22, Z
 8c4:	8c 2f       	mov	r24, r28
 8c6:	b1 dc       	rcall	.-1694   	; 0x22a <w>
 8c8:	f8 01       	movw	r30, r16
		w(i, display_4[i-1]);
 8ca:	ea 53       	subi	r30, 0x3A	; 58
 8cc:	fe 4f       	sbci	r31, 0xFE	; 254
 8ce:	60 81       	ld	r22, Z
 8d0:	8c 2f       	mov	r24, r28
 8d2:	ab dc       	rcall	.-1706   	; 0x22a <w>
 8d4:	21 96       	adiw	r28, 0x01	; 1
	w(0x0A, 0x01);
	w(0x0B, 0x07);
	w(0x0C, 0x01);
	w(0x0F, 0x00);
	
	for(int i = 1; i <= 8; i++)
 8d6:	c9 30       	cpi	r28, 0x09	; 9
 8d8:	d1 05       	cpc	r29, r1
 8da:	0c f3       	brlt	.-62     	; 0x89e <main+0x3a>
 8dc:	80 91 bc 01 	lds	r24, 0x01BC	; 0x8001bc <cnt1>
		w(i, display_4[i-1]);
	}

	while(1)
	{
		srand(cnt1);
 8e0:	90 91 bd 01 	lds	r25, 0x01BD	; 0x8001bd <cnt1+0x1>
 8e4:	77 d1       	rcall	.+750    	; 0xbd4 <srand>
 8e6:	80 e0       	ldi	r24, 0x00	; 0
 8e8:	90 e0       	ldi	r25, 0x00	; 0
			if(m1 == 5) block = block_5;
			if(m1 == 6) block = block_6;
			if(m1 == 7) block = block_7;
		}
		
		for(int i = 0; i < 8; i++)
 8ea:	0c c0       	rjmp	.+24     	; 0x904 <main+0xa0>
 8ec:	fc 01       	movw	r30, r24
 8ee:	ee 0f       	add	r30, r30
			space[i] = 0;
 8f0:	ff 1f       	adc	r31, r31
 8f2:	ee 0f       	add	r30, r30
 8f4:	ff 1f       	adc	r31, r31
 8f6:	e6 58       	subi	r30, 0x86	; 134
 8f8:	fe 4f       	sbci	r31, 0xFE	; 254
 8fa:	10 82       	st	Z, r1
 8fc:	11 82       	std	Z+1, r1	; 0x01
 8fe:	12 82       	std	Z+2, r1	; 0x02
 900:	13 82       	std	Z+3, r1	; 0x03
 902:	01 96       	adiw	r24, 0x01	; 1
 904:	88 30       	cpi	r24, 0x08	; 8
			if(m1 == 5) block = block_5;
			if(m1 == 6) block = block_6;
			if(m1 == 7) block = block_7;
		}
		
		for(int i = 0; i < 8; i++)
 906:	91 05       	cpc	r25, r1
 908:	8c f3       	brlt	.-30     	; 0x8ec <main+0x88>
 90a:	20 e0       	ldi	r18, 0x00	; 0
 90c:	30 e0       	ldi	r19, 0x00	; 0
 90e:	26 c0       	rjmp	.+76     	; 0x95c <main+0xf8>
 910:	f9 01       	movw	r30, r18
 912:	ea 53       	subi	r30, 0x3A	; 58
			space[i] = 0;
		for(int i = 0; i < 8; i++)
		{
			space[i] = display_4[i];
 914:	fe 4f       	sbci	r31, 0xFE	; 254
 916:	80 81       	ld	r24, Z
 918:	90 e0       	ldi	r25, 0x00	; 0
 91a:	a0 e0       	ldi	r26, 0x00	; 0
 91c:	b0 e0       	ldi	r27, 0x00	; 0
 91e:	f9 01       	movw	r30, r18
 920:	ee 0f       	add	r30, r30
 922:	ff 1f       	adc	r31, r31
 924:	ee 0f       	add	r30, r30
 926:	ff 1f       	adc	r31, r31
 928:	e6 58       	subi	r30, 0x86	; 134
 92a:	fe 4f       	sbci	r31, 0xFE	; 254
 92c:	ba 2f       	mov	r27, r26
 92e:	a9 2f       	mov	r26, r25
			space[i] = (space[i] << 8) | display_3[i];
 930:	98 2f       	mov	r25, r24
 932:	88 27       	eor	r24, r24
 934:	e9 01       	movw	r28, r18
 936:	cc 54       	subi	r28, 0x4C	; 76
 938:	de 4f       	sbci	r29, 0xFE	; 254
 93a:	48 81       	ld	r20, Y
 93c:	84 2b       	or	r24, r20
 93e:	ba 2f       	mov	r27, r26
 940:	a9 2f       	mov	r26, r25
			space[i] = (space[i] << 8) | display_2[i];
 942:	98 2f       	mov	r25, r24
 944:	88 27       	eor	r24, r24
 946:	e9 01       	movw	r28, r18
 948:	c6 5a       	subi	r28, 0xA6	; 166
 94a:	de 4f       	sbci	r29, 0xFE	; 254
 94c:	48 81       	ld	r20, Y
 94e:	84 2b       	or	r24, r20
 950:	80 83       	st	Z, r24
 952:	91 83       	std	Z+1, r25	; 0x01
 954:	a2 83       	std	Z+2, r26	; 0x02
 956:	b3 83       	std	Z+3, r27	; 0x03
 958:	2f 5f       	subi	r18, 0xFF	; 255
 95a:	3f 4f       	sbci	r19, 0xFF	; 255
			if(m1 == 7) block = block_7;
		}
		
		for(int i = 0; i < 8; i++)
			space[i] = 0;
		for(int i = 0; i < 8; i++)
 95c:	28 30       	cpi	r18, 0x08	; 8
 95e:	31 05       	cpc	r19, r1
 960:	bc f2       	brlt	.-82     	; 0x910 <main+0xac>
 962:	83 b3       	in	r24, 0x13	; 19
 964:	80 95       	com	r24
			space[i] = (space[i] << 8) | display_3[i];
			space[i] = (space[i] << 8) | display_2[i];
			//space[i] = (space[i] << 8) | display_1[i];
		}
		
		unsigned char sw = ~PINC & 0x0F;
 966:	80 ff       	sbrs	r24, 0
 968:	51 c0       	rjmp	.+162    	; 0xa0c <main+0x1a8>
		if(sw & 0x01)
 96a:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
		{
			if(flag)
 96e:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 972:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <flag+0x2>
 976:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <flag+0x3>
 97a:	89 2b       	or	r24, r25
 97c:	8a 2b       	or	r24, r26
 97e:	8b 2b       	or	r24, r27
 980:	09 f4       	brne	.+2      	; 0x984 <main+0x120>
 982:	83 c0       	rjmp	.+262    	; 0xa8a <main+0x226>
 984:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
			{
				flag = 0;
 988:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 98c:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag+0x2>
 990:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag+0x3>
 994:	00 91 c2 01 	lds	r16, 0x01C2	; 0x8001c2 <status>
				status = (status + 1) % 4;
 998:	10 91 c3 01 	lds	r17, 0x01C3	; 0x8001c3 <status+0x1>
 99c:	20 91 c4 01 	lds	r18, 0x01C4	; 0x8001c4 <status+0x2>
 9a0:	30 91 c5 01 	lds	r19, 0x01C5	; 0x8001c5 <status+0x3>
 9a4:	0f 5f       	subi	r16, 0xFF	; 255
 9a6:	1f 4f       	sbci	r17, 0xFF	; 255
 9a8:	2f 4f       	sbci	r18, 0xFF	; 255
 9aa:	3f 4f       	sbci	r19, 0xFF	; 255
 9ac:	03 70       	andi	r16, 0x03	; 3
 9ae:	11 27       	eor	r17, r17
 9b0:	22 27       	eor	r18, r18
 9b2:	33 27       	eor	r19, r19
 9b4:	00 93 c2 01 	sts	0x01C2, r16	; 0x8001c2 <status>
 9b8:	10 93 c3 01 	sts	0x01C3, r17	; 0x8001c3 <status+0x1>
 9bc:	20 93 c4 01 	sts	0x01C4, r18	; 0x8001c4 <status+0x2>
 9c0:	30 93 c5 01 	sts	0x01C5, r19	; 0x8001c5 <status+0x3>
 9c4:	80 e0       	ldi	r24, 0x00	; 0
 9c6:	90 e0       	ldi	r25, 0x00	; 0
				for(int i = 0; i < 8; i++)
 9c8:	1c c0       	rjmp	.+56     	; 0xa02 <main+0x19e>
 9ca:	fc 01       	movw	r30, r24
 9cc:	32 96       	adiw	r30, 0x02	; 2
					temp[i+2] = block_1[status][i];
 9ce:	d8 01       	movw	r26, r16
 9d0:	aa 0f       	add	r26, r26
 9d2:	bb 1f       	adc	r27, r27
 9d4:	aa 0f       	add	r26, r26
 9d6:	bb 1f       	adc	r27, r27
 9d8:	aa 0f       	add	r26, r26
 9da:	bb 1f       	adc	r27, r27
 9dc:	a8 5f       	subi	r26, 0xF8	; 248
 9de:	be 4f       	sbci	r27, 0xFE	; 254
 9e0:	a8 0f       	add	r26, r24
 9e2:	b9 1f       	adc	r27, r25
 9e4:	4c 91       	ld	r20, X
 9e6:	ee 0f       	add	r30, r30
 9e8:	ff 1f       	adc	r31, r31
 9ea:	ee 0f       	add	r30, r30
 9ec:	ff 1f       	adc	r31, r31
 9ee:	e8 5d       	subi	r30, 0xD8	; 216
 9f0:	fe 4f       	sbci	r31, 0xFE	; 254
 9f2:	50 e0       	ldi	r21, 0x00	; 0
 9f4:	60 e0       	ldi	r22, 0x00	; 0
 9f6:	70 e0       	ldi	r23, 0x00	; 0
 9f8:	40 83       	st	Z, r20
 9fa:	51 83       	std	Z+1, r21	; 0x01
 9fc:	62 83       	std	Z+2, r22	; 0x02
 9fe:	73 83       	std	Z+3, r23	; 0x03
 a00:	01 96       	adiw	r24, 0x01	; 1
		{
			if(flag)
			{
				flag = 0;
				status = (status + 1) % 4;
				for(int i = 0; i < 8; i++)
 a02:	88 30       	cpi	r24, 0x08	; 8
 a04:	91 05       	cpc	r25, r1
 a06:	0c f3       	brlt	.-62     	; 0x9ca <main+0x166>
 a08:	75 dc       	rcall	.-1814   	; 0x2f4 <turn_check>
					temp[i+2] = block_1[status][i];
				turn_check();
 a0a:	3f c0       	rjmp	.+126    	; 0xa8a <main+0x226>
 a0c:	81 ff       	sbrs	r24, 1
 a0e:	1e c0       	rjmp	.+60     	; 0xa4c <main+0x1e8>
			}
		}
		else if(sw & 0x02)
 a10:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
		{
			if(flag)
 a14:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 a18:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <flag+0x2>
 a1c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <flag+0x3>
 a20:	89 2b       	or	r24, r25
 a22:	8a 2b       	or	r24, r26
 a24:	8b 2b       	or	r24, r27
 a26:	89 f1       	breq	.+98     	; 0xa8a <main+0x226>
 a28:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
			{
				flag = 0; 
 a2c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 a30:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag+0x2>
 a34:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag+0x3>
 a38:	80 91 c0 01 	lds	r24, 0x01C0	; 0x8001c0 <m3>
				m3++;
 a3c:	90 91 c1 01 	lds	r25, 0x01C1	; 0x8001c1 <m3+0x1>
 a40:	01 96       	adiw	r24, 0x01	; 1
 a42:	90 93 c1 01 	sts	0x01C1, r25	; 0x8001c1 <m3+0x1>
 a46:	80 93 c0 01 	sts	0x01C0, r24	; 0x8001c0 <m3>
 a4a:	1f c0       	rjmp	.+62     	; 0xa8a <main+0x226>
 a4c:	83 ff       	sbrs	r24, 3
 a4e:	20 c0       	rjmp	.+64     	; 0xa90 <main+0x22c>
			}
		}
		else if(sw & 0x08)
 a50:	80 91 04 01 	lds	r24, 0x0104	; 0x800104 <flag>
		{
			if(flag)
 a54:	90 91 05 01 	lds	r25, 0x0105	; 0x800105 <flag+0x1>
 a58:	a0 91 06 01 	lds	r26, 0x0106	; 0x800106 <flag+0x2>
 a5c:	b0 91 07 01 	lds	r27, 0x0107	; 0x800107 <flag+0x3>
 a60:	89 2b       	or	r24, r25
 a62:	8a 2b       	or	r24, r26
 a64:	8b 2b       	or	r24, r27
 a66:	89 f0       	breq	.+34     	; 0xa8a <main+0x226>
 a68:	10 92 04 01 	sts	0x0104, r1	; 0x800104 <flag>
			{
				flag = 0;
 a6c:	10 92 05 01 	sts	0x0105, r1	; 0x800105 <flag+0x1>
 a70:	10 92 06 01 	sts	0x0106, r1	; 0x800106 <flag+0x2>
 a74:	10 92 07 01 	sts	0x0107, r1	; 0x800107 <flag+0x3>
 a78:	80 91 6a 01 	lds	r24, 0x016A	; 0x80016a <m4>
				m4++;
 a7c:	90 91 6b 01 	lds	r25, 0x016B	; 0x80016b <m4+0x1>
 a80:	01 96       	adiw	r24, 0x01	; 1
 a82:	90 93 6b 01 	sts	0x016B, r25	; 0x80016b <m4+0x1>
 a86:	80 93 6a 01 	sts	0x016A, r24	; 0x80016a <m4>
 a8a:	20 e0       	ldi	r18, 0x00	; 0
 a8c:	30 e0       	ldi	r19, 0x00	; 0
		{
			if(flag)
			{
				flag = 0;
				status = (status + 1) % 4;
				for(int i = 0; i < 8; i++)
 a8e:	2f c0       	rjmp	.+94     	; 0xaee <main+0x28a>
 a90:	81 e0       	ldi	r24, 0x01	; 1
 a92:	90 e0       	ldi	r25, 0x00	; 0
			{
				flag = 0;
				m4++;
			}
		}
		else flag = 1;
 a94:	a0 e0       	ldi	r26, 0x00	; 0
 a96:	b0 e0       	ldi	r27, 0x00	; 0
 a98:	80 93 04 01 	sts	0x0104, r24	; 0x800104 <flag>
 a9c:	90 93 05 01 	sts	0x0105, r25	; 0x800105 <flag+0x1>
 aa0:	a0 93 06 01 	sts	0x0106, r26	; 0x800106 <flag+0x2>
 aa4:	b0 93 07 01 	sts	0x0107, r27	; 0x800107 <flag+0x3>
 aa8:	f0 cf       	rjmp	.-32     	; 0xa8a <main+0x226>
 aaa:	c9 01       	movw	r24, r18
 aac:	02 96       	adiw	r24, 0x02	; 2
		
		for(int i = 0; i < 8; i++)
			temp[i+2] = block_1[status][i];
 aae:	e0 91 c2 01 	lds	r30, 0x01C2	; 0x8001c2 <status>
 ab2:	f0 91 c3 01 	lds	r31, 0x01C3	; 0x8001c3 <status+0x1>
 ab6:	ee 0f       	add	r30, r30
 ab8:	ff 1f       	adc	r31, r31
 aba:	ee 0f       	add	r30, r30
 abc:	ff 1f       	adc	r31, r31
 abe:	ee 0f       	add	r30, r30
 ac0:	ff 1f       	adc	r31, r31
 ac2:	e8 5f       	subi	r30, 0xF8	; 248
 ac4:	fe 4f       	sbci	r31, 0xFE	; 254
 ac6:	e2 0f       	add	r30, r18
 ac8:	f3 1f       	adc	r31, r19
 aca:	40 81       	ld	r20, Z
 acc:	fc 01       	movw	r30, r24
 ace:	ee 0f       	add	r30, r30
 ad0:	ff 1f       	adc	r31, r31
 ad2:	ee 0f       	add	r30, r30
 ad4:	ff 1f       	adc	r31, r31
 ad6:	e8 5d       	subi	r30, 0xD8	; 216
 ad8:	fe 4f       	sbci	r31, 0xFE	; 254
 ada:	84 2f       	mov	r24, r20
 adc:	90 e0       	ldi	r25, 0x00	; 0
 ade:	a0 e0       	ldi	r26, 0x00	; 0
 ae0:	b0 e0       	ldi	r27, 0x00	; 0
 ae2:	80 83       	st	Z, r24
 ae4:	91 83       	std	Z+1, r25	; 0x01
 ae6:	a2 83       	std	Z+2, r26	; 0x02
 ae8:	b3 83       	std	Z+3, r27	; 0x03
				m4++;
			}
		}
		else flag = 1;
		
		for(int i = 0; i < 8; i++)
 aea:	2f 5f       	subi	r18, 0xFF	; 255
 aec:	3f 4f       	sbci	r19, 0xFF	; 255
 aee:	28 30       	cpi	r18, 0x08	; 8
 af0:	31 05       	cpc	r19, r1
 af2:	dc f2       	brlt	.-74     	; 0xaaa <main+0x246>
			temp[i+2] = block_1[status][i];
		side_check();
 af4:	29 dd       	rcall	.-1454   	; 0x548 <side_check>
 af6:	69 dd       	rcall	.-1326   	; 0x5ca <down_check>
		down_check();
 af8:	80 e0       	ldi	r24, 0x00	; 0
 afa:	90 e0       	ldi	r25, 0x00	; 0
		
		
		for(int i = 0; i < 8; i++)
 afc:	1c c0       	rjmp	.+56     	; 0xb36 <main+0x2d2>
 afe:	fc 01       	movw	r30, r24
 b00:	ee 0f       	add	r30, r30
		{
			space_4[i] = (space[i] << 8) >> 24;
 b02:	ff 1f       	adc	r31, r31
 b04:	ee 0f       	add	r30, r30
 b06:	ff 1f       	adc	r31, r31
 b08:	e6 58       	subi	r30, 0x86	; 134
 b0a:	fe 4f       	sbci	r31, 0xFE	; 254
 b0c:	20 81       	ld	r18, Z
 b0e:	31 81       	ldd	r19, Z+1	; 0x01
 b10:	42 81       	ldd	r20, Z+2	; 0x02
 b12:	fc 01       	movw	r30, r24
 b14:	e2 53       	subi	r30, 0x32	; 50
 b16:	fe 4f       	sbci	r31, 0xFE	; 254
 b18:	40 83       	st	Z, r20
 b1a:	fc 01       	movw	r30, r24
 b1c:	e6 55       	subi	r30, 0x56	; 86
			space_3[i] = (space[i] << 16) >> 24;
 b1e:	fe 4f       	sbci	r31, 0xFE	; 254
 b20:	30 83       	st	Z, r19
 b22:	fc 01       	movw	r30, r24
 b24:	ee 55       	subi	r30, 0x5E	; 94
			space_2[i] = (space[i] << 24) >> 24;
 b26:	fe 4f       	sbci	r31, 0xFE	; 254
 b28:	20 83       	st	Z, r18
 b2a:	fc 01       	movw	r30, r24
			space_1[i] = 0x10;
 b2c:	e2 59       	subi	r30, 0x92	; 146
 b2e:	fe 4f       	sbci	r31, 0xFE	; 254
 b30:	20 e1       	ldi	r18, 0x10	; 16
 b32:	20 83       	st	Z, r18
 b34:	01 96       	adiw	r24, 0x01	; 1
			temp[i+2] = block_1[status][i];
		side_check();
		down_check();
		
		
		for(int i = 0; i < 8; i++)
 b36:	88 30       	cpi	r24, 0x08	; 8
 b38:	91 05       	cpc	r25, r1
 b3a:	0c f3       	brlt	.-62     	; 0xafe <main+0x29a>
 b3c:	ad db       	rcall	.-2214   	; 0x298 <output>
			space_4[i] = (space[i] << 8) >> 24;
			space_3[i] = (space[i] << 16) >> 24;
			space_2[i] = (space[i] << 24) >> 24;
			space_1[i] = 0x10;
		}
		output();
 b3e:	ce ce       	rjmp	.-612    	; 0x8dc <main+0x78>

00000b40 <do_rand>:
 b40:	8f 92       	push	r8
	}
 b42:	9f 92       	push	r9
 b44:	af 92       	push	r10
 b46:	bf 92       	push	r11
 b48:	cf 92       	push	r12
 b4a:	df 92       	push	r13
 b4c:	ef 92       	push	r14
 b4e:	ff 92       	push	r15
 b50:	cf 93       	push	r28
 b52:	df 93       	push	r29
 b54:	ec 01       	movw	r28, r24
 b56:	68 81       	ld	r22, Y
 b58:	79 81       	ldd	r23, Y+1	; 0x01
 b5a:	8a 81       	ldd	r24, Y+2	; 0x02
 b5c:	9b 81       	ldd	r25, Y+3	; 0x03
 b5e:	61 15       	cp	r22, r1
 b60:	71 05       	cpc	r23, r1
 b62:	81 05       	cpc	r24, r1
 b64:	91 05       	cpc	r25, r1
 b66:	21 f4       	brne	.+8      	; 0xb70 <do_rand+0x30>
 b68:	64 e2       	ldi	r22, 0x24	; 36
 b6a:	79 ed       	ldi	r23, 0xD9	; 217
 b6c:	8b e5       	ldi	r24, 0x5B	; 91
 b6e:	97 e0       	ldi	r25, 0x07	; 7
 b70:	2d e1       	ldi	r18, 0x1D	; 29
 b72:	33 ef       	ldi	r19, 0xF3	; 243
 b74:	41 e0       	ldi	r20, 0x01	; 1
 b76:	50 e0       	ldi	r21, 0x00	; 0
 b78:	38 d0       	rcall	.+112    	; 0xbea <__divmodsi4>
 b7a:	49 01       	movw	r8, r18
 b7c:	5a 01       	movw	r10, r20
 b7e:	9b 01       	movw	r18, r22
 b80:	ac 01       	movw	r20, r24
 b82:	a7 ea       	ldi	r26, 0xA7	; 167
 b84:	b1 e4       	ldi	r27, 0x41	; 65
 b86:	4d d0       	rcall	.+154    	; 0xc22 <__muluhisi3>
 b88:	6b 01       	movw	r12, r22
 b8a:	7c 01       	movw	r14, r24
 b8c:	ac ee       	ldi	r26, 0xEC	; 236
 b8e:	b4 ef       	ldi	r27, 0xF4	; 244
 b90:	a5 01       	movw	r20, r10
 b92:	94 01       	movw	r18, r8
 b94:	52 d0       	rcall	.+164    	; 0xc3a <__mulohisi3>
 b96:	dc 01       	movw	r26, r24
 b98:	cb 01       	movw	r24, r22
 b9a:	8c 0d       	add	r24, r12
 b9c:	9d 1d       	adc	r25, r13
 b9e:	ae 1d       	adc	r26, r14
 ba0:	bf 1d       	adc	r27, r15
 ba2:	b7 ff       	sbrs	r27, 7
 ba4:	03 c0       	rjmp	.+6      	; 0xbac <do_rand+0x6c>
 ba6:	01 97       	sbiw	r24, 0x01	; 1
 ba8:	a1 09       	sbc	r26, r1
 baa:	b0 48       	sbci	r27, 0x80	; 128
 bac:	88 83       	st	Y, r24
 bae:	99 83       	std	Y+1, r25	; 0x01
 bb0:	aa 83       	std	Y+2, r26	; 0x02
 bb2:	bb 83       	std	Y+3, r27	; 0x03
 bb4:	9f 77       	andi	r25, 0x7F	; 127
 bb6:	df 91       	pop	r29
 bb8:	cf 91       	pop	r28
 bba:	ff 90       	pop	r15
 bbc:	ef 90       	pop	r14
 bbe:	df 90       	pop	r13
 bc0:	cf 90       	pop	r12
 bc2:	bf 90       	pop	r11
 bc4:	af 90       	pop	r10
 bc6:	9f 90       	pop	r9
 bc8:	8f 90       	pop	r8
 bca:	08 95       	ret

00000bcc <rand_r>:
 bcc:	b9 cf       	rjmp	.-142    	; 0xb40 <do_rand>

00000bce <rand>:
 bce:	80 e0       	ldi	r24, 0x00	; 0
 bd0:	91 e0       	ldi	r25, 0x01	; 1
 bd2:	b6 cf       	rjmp	.-148    	; 0xb40 <do_rand>

00000bd4 <srand>:
 bd4:	a0 e0       	ldi	r26, 0x00	; 0
 bd6:	b0 e0       	ldi	r27, 0x00	; 0
 bd8:	80 93 00 01 	sts	0x0100, r24	; 0x800100 <__DATA_REGION_ORIGIN__>
 bdc:	90 93 01 01 	sts	0x0101, r25	; 0x800101 <__DATA_REGION_ORIGIN__+0x1>
 be0:	a0 93 02 01 	sts	0x0102, r26	; 0x800102 <__DATA_REGION_ORIGIN__+0x2>
 be4:	b0 93 03 01 	sts	0x0103, r27	; 0x800103 <__DATA_REGION_ORIGIN__+0x3>
 be8:	08 95       	ret

00000bea <__divmodsi4>:
 bea:	05 2e       	mov	r0, r21
 bec:	97 fb       	bst	r25, 7
 bee:	16 f4       	brtc	.+4      	; 0xbf4 <__divmodsi4+0xa>
 bf0:	00 94       	com	r0
 bf2:	0f d0       	rcall	.+30     	; 0xc12 <__negsi2>
 bf4:	57 fd       	sbrc	r21, 7
 bf6:	05 d0       	rcall	.+10     	; 0xc02 <__divmodsi4_neg2>
 bf8:	24 d0       	rcall	.+72     	; 0xc42 <__udivmodsi4>
 bfa:	07 fc       	sbrc	r0, 7
 bfc:	02 d0       	rcall	.+4      	; 0xc02 <__divmodsi4_neg2>
 bfe:	46 f4       	brtc	.+16     	; 0xc10 <__divmodsi4_exit>
 c00:	08 c0       	rjmp	.+16     	; 0xc12 <__negsi2>

00000c02 <__divmodsi4_neg2>:
 c02:	50 95       	com	r21
 c04:	40 95       	com	r20
 c06:	30 95       	com	r19
 c08:	21 95       	neg	r18
 c0a:	3f 4f       	sbci	r19, 0xFF	; 255
 c0c:	4f 4f       	sbci	r20, 0xFF	; 255
 c0e:	5f 4f       	sbci	r21, 0xFF	; 255

00000c10 <__divmodsi4_exit>:
 c10:	08 95       	ret

00000c12 <__negsi2>:
 c12:	90 95       	com	r25
 c14:	80 95       	com	r24
 c16:	70 95       	com	r23
 c18:	61 95       	neg	r22
 c1a:	7f 4f       	sbci	r23, 0xFF	; 255
 c1c:	8f 4f       	sbci	r24, 0xFF	; 255
 c1e:	9f 4f       	sbci	r25, 0xFF	; 255
 c20:	08 95       	ret

00000c22 <__muluhisi3>:
 c22:	31 d0       	rcall	.+98     	; 0xc86 <__umulhisi3>
 c24:	a5 9f       	mul	r26, r21
 c26:	90 0d       	add	r25, r0
 c28:	b4 9f       	mul	r27, r20
 c2a:	90 0d       	add	r25, r0
 c2c:	a4 9f       	mul	r26, r20
 c2e:	80 0d       	add	r24, r0
 c30:	91 1d       	adc	r25, r1
 c32:	11 24       	eor	r1, r1
 c34:	08 95       	ret

00000c36 <__mulshisi3>:
 c36:	b7 ff       	sbrs	r27, 7
 c38:	f4 cf       	rjmp	.-24     	; 0xc22 <__muluhisi3>

00000c3a <__mulohisi3>:
 c3a:	f3 df       	rcall	.-26     	; 0xc22 <__muluhisi3>
 c3c:	82 1b       	sub	r24, r18
 c3e:	93 0b       	sbc	r25, r19
 c40:	08 95       	ret

00000c42 <__udivmodsi4>:
 c42:	a1 e2       	ldi	r26, 0x21	; 33
 c44:	1a 2e       	mov	r1, r26
 c46:	aa 1b       	sub	r26, r26
 c48:	bb 1b       	sub	r27, r27
 c4a:	fd 01       	movw	r30, r26
 c4c:	0d c0       	rjmp	.+26     	; 0xc68 <__udivmodsi4_ep>

00000c4e <__udivmodsi4_loop>:
 c4e:	aa 1f       	adc	r26, r26
 c50:	bb 1f       	adc	r27, r27
 c52:	ee 1f       	adc	r30, r30
 c54:	ff 1f       	adc	r31, r31
 c56:	a2 17       	cp	r26, r18
 c58:	b3 07       	cpc	r27, r19
 c5a:	e4 07       	cpc	r30, r20
 c5c:	f5 07       	cpc	r31, r21
 c5e:	20 f0       	brcs	.+8      	; 0xc68 <__udivmodsi4_ep>
 c60:	a2 1b       	sub	r26, r18
 c62:	b3 0b       	sbc	r27, r19
 c64:	e4 0b       	sbc	r30, r20
 c66:	f5 0b       	sbc	r31, r21

00000c68 <__udivmodsi4_ep>:
 c68:	66 1f       	adc	r22, r22
 c6a:	77 1f       	adc	r23, r23
 c6c:	88 1f       	adc	r24, r24
 c6e:	99 1f       	adc	r25, r25
 c70:	1a 94       	dec	r1
 c72:	69 f7       	brne	.-38     	; 0xc4e <__udivmodsi4_loop>
 c74:	60 95       	com	r22
 c76:	70 95       	com	r23
 c78:	80 95       	com	r24
 c7a:	90 95       	com	r25
 c7c:	9b 01       	movw	r18, r22
 c7e:	ac 01       	movw	r20, r24
 c80:	bd 01       	movw	r22, r26
 c82:	cf 01       	movw	r24, r30
 c84:	08 95       	ret

00000c86 <__umulhisi3>:
 c86:	a2 9f       	mul	r26, r18
 c88:	b0 01       	movw	r22, r0
 c8a:	b3 9f       	mul	r27, r19
 c8c:	c0 01       	movw	r24, r0
 c8e:	a3 9f       	mul	r26, r19
 c90:	70 0d       	add	r23, r0
 c92:	81 1d       	adc	r24, r1
 c94:	11 24       	eor	r1, r1
 c96:	91 1d       	adc	r25, r1
 c98:	b2 9f       	mul	r27, r18
 c9a:	70 0d       	add	r23, r0
 c9c:	81 1d       	adc	r24, r1
 c9e:	11 24       	eor	r1, r1
 ca0:	91 1d       	adc	r25, r1
 ca2:	08 95       	ret

00000ca4 <_exit>:
 ca4:	f8 94       	cli

00000ca6 <__stop_program>:
 ca6:	ff cf       	rjmp	.-2      	; 0xca6 <__stop_program>
